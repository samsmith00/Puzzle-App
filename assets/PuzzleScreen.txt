import React, { useEffect, useState } from "react";
import { View, Image, StyleSheet, FlatList, TouchableOpacity, Text} from "react-native"
import axios from 'axios';

interface PuzzlePiece {
    id: number, 
    url: string, 
    correctX: number, 
    correctY: number, 
    placed: boolean,
}

const CLOUDINARY_URL = 'https://res.cloudinary.com/dmta7qo6i/image/upload';
const IMAGE_ID = 'jvscejaqjupclypuljzh';
const PIECE_SIZE = 100;
const GRID_SIZE = 4;

const PuzzleScreen: React.FC = () =>{
    const [puzzlePieces, setPuzzlePieces] = useState<PuzzlePiece[]> ([]);
    const [grid, setGrid] = useState<(PuzzlePiece| null)[][]>([])

    useEffect(() => {
        const generatePuzzle = () => {
            const pieces: PuzzlePiece[] = [];
            const initialGrid: (PuzzlePiece | null)[][] = Array(GRID_SIZE)
            .fill(null)
            .map(() => Array(GRID_SIZE).fill(null));

            let index = 0; 

            for (let row = 0; row < GRID_SIZE; row++) {
                for (let col = 0; col < GRID_SIZE; col++) {
                    const x = col * PIECE_SIZE;
                    const y = row * PIECE_SIZE;

                    const pieceURL = `${CLOUDINARY_URL}/c_crop,h_${PIECE_SIZE},w_${PIECE_SIZE},x_${x},y_${y}/v1/${IMAGE_ID}`;

                pieces.push({
                    id: index, 
                    url: pieceURL, 
                    correctX: col * PIECE_SIZE, 
                    correctY: row * PIECE_SIZE,
                    placed: false,
                  });

                index++;
            }
        }
        setPuzzlePieces(pieces);
        setGrid(initialGrid)
    };
    generatePuzzle();
}, [])

const handlePieceClick = (id: number) => {
    setPuzzlePieces((prevPieces) =>
      prevPieces.map((piece) =>
        piece.id === id
          ? { ...piece, placed: true }
          : piece
      )
    );

    setGrid((prevGrid) => {
      const piece = puzzlePieces.find((p) => p.id === id);
      if (!piece) return prevGrid;

      const newGrid = [...prevGrid];
      const row = piece.correctY / PIECE_SIZE;
      const col = piece.correctX / PIECE_SIZE;

      newGrid[row][col] = piece;
      return newGrid;
    });
  };

    const renderPuzzlePiece = ({ item }: {item: PuzzlePiece}) => {
        if (item.placed) return null;

        return (
            <TouchableOpacity 
                onPress={() => handlePieceClick(item.id)}
            style = {styles.listItem}
            >
                <Image
                    source={{uri: item.url}}
                    style={{width: PIECE_SIZE, height: PIECE_SIZE}}
                />
            </TouchableOpacity>
        );
    };

    return (
        <View style={styles.container}>
            <View style={styles.grid}>
                {grid.map((row, rowIndex) =>
                    row.map((cell, colIndex) => (
                        <View
                            key={`${rowIndex}-${colIndex}`}
                            style={[
                            styles.cell,
                            { width: PIECE_SIZE, height: PIECE_SIZE },
                        ]}
                      >
                        {cell && (
                            <Image
                                source={{ uri: cell.url }}
                                style={{ width: '100%', height: '100%' }} 
                            />
                        )}
                        </View>
                    ))
                )}
            </View>

            <FlatList
                data={puzzlePieces}
                renderItem={renderPuzzlePiece}
                keyExtractor={(item) => item.id.toString()}
                style={styles.list}
                contentContainerStyle={styles.listContent}
      />
    </View>
  );
};

            


const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#f8f8f8',
    },
    grid: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      width: PIECE_SIZE * GRID_SIZE,
      height: PIECE_SIZE * GRID_SIZE,
      alignSelf: 'center',
      marginVertical: 20,
    },
    cell: {
      borderWidth: 1,
      borderColor: '#ddd',
      alignItems: 'center',
      justifyContent: 'center',
    },
    list: {
      flex: 1,
      backgroundColor: '#fff',
    },
    listContent: {
      alignItems: 'center',
    },
    listItem: {
      marginVertical: 5,
      alignItems: 'center',
    },
  });
  
  export default PuzzleScreen;


